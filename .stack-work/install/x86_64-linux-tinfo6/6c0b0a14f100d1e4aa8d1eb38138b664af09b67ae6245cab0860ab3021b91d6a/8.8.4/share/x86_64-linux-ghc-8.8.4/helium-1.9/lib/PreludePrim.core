module PreludePrim
    ( 
    -- Conversion
      primOrd, primChr, intToFloat, ceiling, floor, truncate, round


    -- Show
    , show
    
    -- Enum
    , enumSuccInt, enumPredInt
    , enumFromInt, enumFromThenInt, enumFromToInt, enumFromThenToInt
	
    , enumSuccFloat, enumPredFloat, toEnumFloat
    , enumFromFloat, enumFromThenFloat, enumFromToFloat, enumFromThenToFloat

    , toEnumVoid, fromEnumVoid, enumFromVoid, enumFromThenVoid

    , toEnumBool, fromEnumBool, enumFromBool, enumFromThenBool

    , enumFromChar, enumFromThenChar

    -- Int
    , div, mod, quot, rem
       -- Int
    , (+#), (-#), (*#), (/#), (%#)
    , and, xor, or, shr, shl, shrNat
    , (==#), (/=#), (<#), (>#), (<=#), (>=#)

    -- Float
    , (+.), (-.), (*.), (/.)
    , (==.), (/=.), (<.), (>.), (<=.), (>=.)
    -- Float
    , (/)
    , sqrt, (**.), exp, log, sin, cos, tan
        
    -- IO monad
    --, return 
    , unsafePerformIO
    , putChar, putStr, putStrLn

    -- IO files
    , getChar
    , Handle, stdin, stdout, stderr
    , IOMode(..), openFile, hClose
    , hGetChar, hPutChar, hPutString
    , fmapIO, pureIO, returnIO, apIO, bindIO
    
    -- strictness
    , ($!), seq
    
    -- misc
    , error, catch, catchEof, raise

    , Ordering(EQ, LT, GT)

    ) where

import HeliumLang
    ( showFloat, showInt, showBool, showChar, showUnit
    , ''$primPutChar'', ''$primPutStr'', ''$primPutStrLn'', ''$primUnsafePerformIO''
    )

import LvmLang
    ( (+#) , (*#), (-#)
    , (==#), (/=#)
    , (<#), (<=#), (>=#), (>#)
    , mod = (%#), quot, rem, div = (/#)
    
    , (+.), (*.), (-.), (/) = (/.)
    , (==.), (/=.)
    , (<.), (<=.), (>=.), (>.)
    
    , primPackedToString = stringFromPacked

    , Int(), Float(), IO()
    , custom "typedecl" String
    , Bool(True, False)
    , '':[]''('':[]'', (:))
    , '':()''('':()'')
    , bindIO, returnIO
    , primPackedToString = stringFromPacked
    , primUnsafePerformIO = unsafePerformIO
    , fmapIO, apIO, pureIO
    , ($!), seq
    , True -- hack
    )

import LvmIO
    ( stdinChannel = stdin, stdoutChannel = stdout, stderrChannel = stderr
    , Channel(), Input(), Output()
    , CreateMode(CreateIfNotExists, CreateOverwrite)
    , openInputFile, openOutputFile
    , close, flush
    , inputChar, outputChar, outputString
    )

import LvmException
    ( error, errorPacked {- hack -}, catch, raise 
    , Exception(System), SystemException(EndOfFile)
    )

custom infix (+#)  : public [6,"left"]
custom infix (-#)  : public [6,"left"]
custom infix (*#)  : public [7,"left"]
custom infix div  : public [7,"left"]
custom infix mod  : public [7,"left"]
custom infix quot : public [7,"left"]
custom infix rem  : public [7,"left"]


custom infix (/#)  : public [7,"left"]

custom infix (**.) : public [8,"right"]
custom infix ($!)  : public [0,"right"]

primOrd :: Char -> Int
primOrd x = x

primChr :: Int -> Char
primChr x = x


{--------------------------------------------------------------------------
  IO
--------------------------------------------------------------------------}
putChar :: Char -> IO ()
putChar c = ''$primPutChar''c

putStr :: String -> IO ()
putStr s = ''$primPutStr'' s 

putStrLn :: String -> IO ()
putStrLn s = ''$primPutStrLn'' s

unsafePerformIO :: IO a -> a 
unsafePerformIO io 
  = ''$primUnsafePerformIO'' io


-- Float

extern primFloatSqrt "fp_sqrt" :: "FF"
extern float_of_string_extern "float_of_string" :: "Fz"

sqrt :: Float -> Float
sqrt x = let! x = x 
              y = float_of_string_extern "0.0"
         in
            case (>=.) x y of
            {   True -> primFloatSqrt x
            ;   _    -> errorPacked "Can't apply sqrt to negative floating-point number"
            }

extern primFloatPower "fp_pow" :: "FFF"

(**.) :: Float -> Float -> Float
(**.) x y = let! x = x in let! y = y in primFloatPower x y

extern primFloatExp "fp_exp" :: "FF"

exp :: Float -> Float
exp x = let! x = x in primFloatExp x

extern primFloatLog "fp_log" :: "FF"

log :: Float -> Float
log x = let! x = x in primFloatLog x

extern primFloatSin "fp_sin" :: "FF"

sin :: Float -> Float
sin x = let! x = x in primFloatSin x

extern primFloatCos "fp_cos" :: "FF"

cos :: Float -> Float
cos x = let! x = x in primFloatCos x

extern primFloatTan "fp_tan" :: "FF"

tan :: Float -> Float
tan x = let! x = x in primFloatTan x

extern primIntToFloat "float_of_int" :: "FI"

intToFloat :: Int -> Float
intToFloat x = let! x = x in primIntToFloat x

extern primFloatCeil "fp_ceil" :: "FF"

ceiling :: Float -> Int
ceiling x = let! x = x 
                 y = primFloatCeil x
            in primFloatTruncateInt y

extern primFloatFloor "fp_floor" :: "FF"

floor :: Float -> Int
floor x = let! x = x 
               y = primFloatFloor x
          in primFloatTruncateInt y

extern primFloatTruncateInt "fp_trunc_int" :: "IF"

truncate :: Float -> Int
truncate x = let! x = x in primFloatTruncateInt x

extern primFloatNear     "fp_near"      :: "FF"
extern primFloatRoundInt "fp_round_int" :: "IF"

round :: Float -> Int
round x 
    = let! y = x
           z = primFloatNear     y
           i = primFloatRoundInt z
      in i

-- Overloading

{- Show -}


 
 

-- not exported
showAList :: "Show a => [a] -> String"
showAList dShow = 
  case dShow of
     (@0, 2) x1 x2 -> x2
     
{- Num -}

id x = x



allTrue xs =
    case xs of
        [] -> True
        (:) b bs -> case b of False -> False
                              _     -> allTrue bs

not :: Bool -> Bool
not x = case x of True -> False
                  False -> True
            
{- Ord -}


{- Enum -}

const x y = x
map f xs = case xs of
              [] -> [] ;
			  (:) x xs -> (:) (f x) (map f xs)

enumSuccInt :: Int -> Int
enumSuccInt x = (+#) x 1
enumPredInt :: Int -> Int
enumPredInt x = (-#) x 1
enumFromInt :: Int -> [Int]
enumFromInt = enumIntWithSteps (const True) 1
enumFromThenInt :: Int -> Int -> [Int]
enumFromThenInt x y = enumIntWithSteps (const True) ((-#) y x) x
enumFromToInt :: Int -> Int -> [Int]
enumFromToInt x y = enumIntWithSteps ((>=#) y) 1 x
enumFromThenToInt :: Int -> Int -> Int -> [Int]
enumFromThenToInt x y z = 
   case compareInt x y of
      LT -> enumIntWithSteps ((>=#) z) ((-#) y x) x;
	  EQ -> enumIntWithSteps (const True) 0 x ;
	  GT -> enumIntWithSteps ((<=#) z) ((-#) y x) x

enumIntWithSteps p d x = 
   case p x of 
      True -> (:) x (enumIntWithSteps p d ((+#) d x)) ;
	  _ -> []

toEnumFloat :: Int -> Float
toEnumFloat x   = let! x = x in primIntToFloat x
enumSuccFloat :: Float -> Float
enumSuccFloat x = let! x = ((+#) (truncate x) 1) in primIntToFloat x
enumPredFloat :: Float -> Float
enumPredFloat x = let! x = ((-#) (truncate x) 1) in primIntToFloat x
enumFromFloat :: Float -> [Float]
enumFromFloat = let! one = primIntToFloat 1 in enumFloatWithSteps (const True) one
enumFromThenFloat :: Float -> Float -> [Float]
enumFromThenFloat x y = enumFloatWithSteps (const True) ((-.) y x) x
enumFromToFloat :: Float -> Float -> [Float]
enumFromToFloat x y = let! one = primIntToFloat 1 in enumFloatWithSteps ((>=.) y) one x
enumFromThenToFloat :: Float -> Float -> Float  -> [Float]
enumFromThenToFloat x y z =
   case compareFloat x y of
      LT -> enumFloatWithSteps ((>=.) z) ((-.) y x) x;
	  EQ -> let! zero = primIntToFloat 0 in enumFloatWithSteps (const True) zero x ;
	  GT -> enumFloatWithSteps ((<=.) z) ((-.) y x) x

enumFloatWithSteps p d x = 
   case p x of 
      True -> (:) x (enumFloatWithSteps p d ((+.) d x)) ;
	  _ -> []

toEnumVoid :: Int -> ()
toEnumVoid i = 
   case i of 
      0 -> () ;
	  _ -> errorPacked "illegal () enumeration"	  
fromEnumVoid :: () -> Int
fromEnumVoid _ = 0
enumFromVoid :: () -> [()]
enumFromVoid _ = [()]
enumFromThenVoid :: () -> () -> [()]
enumFromThenVoid _ _ = [()]
	  
enumFromChar :: Char -> [Char]
enumFromChar x = enumCharWithSteps 1 (primOrd x)
enumFromThenChar :: Char -> Char -> [Char]
enumFromThenChar x y = enumCharWithSteps ((-#) (primOrd y) (primOrd x)) (primOrd x)
enumCharWithSteps d x =
   case (<#) x 0 of
      True -> [] ;
	  _ -> case (>#) x 255 of
	          True -> [] ;
			  _ -> (:) (primChr x) (enumCharWithSteps d ((+#) d x))

toEnumBool :: Int -> Bool
toEnumBool i =
   case i of 
      0 -> False ;
	  1 -> True ;
	  _ -> errorPacked "illegal boolean enumeration"
fromEnumBool :: Bool -> Int
fromEnumBool b =
   case b of {
      False -> 0 ;
      True -> 1 } 

enumFromBool :: Bool -> [Bool]
enumFromBool b = map toEnumBool (enumFromToInt (fromEnumBool b) 1)
enumFromThenBool :: Bool -> Bool -> Bool
enumFromThenBool b1 b2 =
   case b1 of {
      False -> map toEnumBool (enumFromThenToInt (fromEnumBool b1) (fromEnumBool b2) 1) ;
      _ -> map toEnumBool (enumFromThenToInt (fromEnumBool b1) (fromEnumBool b2) 0) }


enumSuccDefault f1 f2 x = f1 ((+#) (f2 x) 1)
enumPredDefault f1 f2 x = f1 ((-#) (f2 x) 1)
enumFromToDefault f1 f2 x y = map f1 (enumFromToInt (f2 x) (f2 y))
enumFromThenToDefault f1 f2 x y z = map f1 (enumFromThenToInt (f2 x) (f2 y) (f2 z))

data Ordering = LT | EQ | GT 

showOrdering :: Ordering -> String
showOrdering x = 
    case x of
        LT -> primPackedToString "LT"
        EQ -> primPackedToString "EQ"
        GT -> primPackedToString "GT"

compareList ''$dictElem'' xs ys =
    case xs of
        [] -> 
            case ys of
                (:) yh yt -> LT
                _         -> EQ
        (:) xh xt ->
            case ys of
                [] -> GT
                (:) yh yt ->
                    case compare ''$dictElem'' xh yh of
                        GT -> GT
                        LT -> LT
                        EQ -> compareList ''$dictElem'' xt yt

{- misc -}

primAppend :: [a] -> [a] -> [a] -- is '++'
primAppend xs ys =
    case xs of 
    {   '':[]'' -> ys
    ;   (:) z zs -> (:) z (primAppend zs ys)
    }

{--------------------------------------------------------------------------
  IO
--------------------------------------------------------------------------}
data Handle
 = HandleRead  (Channel Input)
 | HandleWrite (Channel Output)

data IOMode
 = ReadMode
 | WriteMode
 | AppendMode

stdin :: Handle
stdin
  = HandleRead stdinChannel

stdout :: Handle
stdout
  = HandleWrite stdoutChannel

stderr :: Handle
stderr
  = HandleWrite stderrChannel

getChar :: IO Char
getChar 
  = inputChar stdinChannel  -- hGetChar stdin

openFile :: String -> IOMode -> IO Handle
openFile fpath mode
  = case mode of
      ReadMode  -> bindIO (openInputFile fpath True) (\ch -> returnIO (HandleRead ch))
      WriteMode -> bindIO (openOutputFile fpath True CreateOverwrite) (\ch -> returnIO (HandleWrite ch))
      AppendMode-> bindIO (openOutputFile fpath True CreateIfNotExists) (\ch -> returnIO (HandleWrite ch))

hClose :: Handle -> IO ()
hClose handle
  = case handle of
      HandleRead ch   -> close ch
      HandleWrite ch  -> -- Yuck: alleen maar om altijd geflushed te closen..
                         catch (bindIO (flush ch) (\_ -> close ch)) 
                               (\exn -> bindIO (catch (close ch) (\_ -> raise exn))
                                               (\_ -> raise exn))

hFlush :: Handle -> IO ()
hFlush handle
  = case handle of
      HandleRead ch   -> flush ch
      HandleWrite ch  -> flush ch

hGetChar :: Handle -> IO Char
hGetChar handle
  = case handle of
      HandleRead ch  -> inputChar ch
      HandleWrite ch -> errorPacked "PreludePrim.hGetChar: Handle is not open for reading"

hPutChar :: Handle -> Char -> IO ()
hPutChar handle c
  = case handle of
      HandleRead ch  -> errorPacked "PreludePrim.hPutChar: Handle is not open for writing"
      HandleWrite ch -> outputChar ch c

hPutString :: Handle -> String -> IO ()
hPutString handle s
  = case handle of
      HandleRead ch  -> errorPacked "PreludePrim.hPutString: Handle is not open for writing"
      HandleWrite ch -> outputString ch s

catchEof :: IO a -> IO a -> IO a
catchEof io onEof
  = catch io
     (\exn -> case exn of
                System sysexn -> case sysexn of
                                   EndOfFile -> onEof
                                   _         -> raise exn
                _             -> raise exn
     )

compare :: "Ord a => a -> a -> Ordering"
compare dOrd =
    case dOrd of
        (@0, 2) eq cmp -> cmp
               

compareInt x y = 
    case (<#) x y of
        True -> LT
        _    -> case (==#) x y of
                    True -> EQ
                    _    -> GT

compareFloat x y = 
    case (<.) x y of
        True -> LT
        _    -> case (==.) x y of
                    True -> EQ
                    _    -> GT
                    
compareBool x y =
    case x of 
        True -> case y of True -> EQ
                          _    -> GT
        _    -> case y of True -> LT
                          _    -> EQ
