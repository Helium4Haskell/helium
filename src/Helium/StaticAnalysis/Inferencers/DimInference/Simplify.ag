-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
--
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Simplify a unit to a normal form
-------------------------------------------------------------------------------

INCLUDE "UHA_Syntax.ag"

{

data Unit = Times Unit Unit | Power Name Int {- Power Variable Int -}

mapToUnit :: (M.map Name Int) -> Unit
mapToUnit m =
    M.foldrWithKey (\name n unit -> Times (Power name n) unit) (Power One 1) m
}

ATTR Unit [ | | simplifiedunit USE {`M.unionWith (+)`} {M.empty}: {M.map Name Int}), canonicalunit : Unit]

ATTR SimpleUnit [ | | name : Name ]

SEM SimpleUnit
    | SimpleUnit    @loc.name = @name

SEM Unit
    | Base      @lhs . simplifiedunit = M.singleton @simpleunit.name
                     . canonicalunit  = mapToUnit @lhs.simplifiedunit
    | Variable  @lhs . variables      = M.singleton @name.self
    | Div       @lhs . simplifiedunit = M.unionWith (-) @dividend.simplifiedunit @divisor.simplifiedunit
                     . canonicalunit  = mapToUnit @lhs.simplifiedunit
    | Power     @lhs . simplifiedunit = M.map (* @exponent) @term.simplifiedunit
                     . canonicalunit  = mapToUnit @lhs.simplifiedunit
    | NegPower  @lhs . simplifiedunit = M.map (* (- @exponent)) @term.simplifiedunit
                     . canonicalunit  = mapToUnit @lhs.simplifiedunit
