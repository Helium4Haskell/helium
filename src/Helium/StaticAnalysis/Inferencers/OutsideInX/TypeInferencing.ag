
{
typeInferencingIOX :: [Option] -> ImportEnvironment -> Module
                      -> (DictionaryEnvironment, TypeEnvironment, TypeErrors, Warnings, Bool)
typeInferencingIOX options importEnv module_ =
   let res = wrap_Module (sem_Module module_) Inh_Module {
                  importEnvironment_Inh_Module = importEnv,
                  options_Inh_Module = options,
                  betaUnique_Inh_Module = 0,
                  typeSignatures_Inh_Module = M.empty
                  }
   in (dictionaryEnvironment_Syn_Module res, toplevelTypes_Syn_Module res, typeErrors_Syn_Module res, warnings_Syn_Module res, gadtUsed_Syn_Module res)
}

-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR Module
   [
      options               : {[Option]}
   |
   | dictionaryEnvironment : DictionaryEnvironment
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "LocalInfo.ag"
INCLUDE "GlobalInfo.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "TypeInferenceRules.ag"
INCLUDE "HeliumPartialSyntax.ag"
INCLUDE "UHA_Syntax.ag"

-- INCLUDE "TS_PatternMatching.ag"


  
-------------------------------------------------------------------------------
-- Imports

imports {
-- error messages and warnings
import Helium.StaticAnalysis.Messages.Messages
import Helium.StaticAnalysis.Messages.TypeErrors
import Helium.StaticAnalysis.Messages.Warnings
import Helium.StaticAnalysis.Miscellaneous.ConstraintInfoOU
import Helium.StaticAnalysis.Inferencers.OutsideInX.TopConversion
import Helium.StaticAnalysis.Inferencers.OutsideInX.BindingGroupAnalysis
import Helium.StaticAnalysis.Inferencers.OutsideInX.ConstraintHelper
import Helium.StaticAnalysis.Miscellaneous.TypeConversion
import Helium.StaticAnalysis.Miscellaneous.UHA_Source
import Helium.StaticAnalysis.Miscellaneous.DoublyLinkedTree
import Helium.StaticAnalysis.HeuristicsOU.HeuristicsInfo

-- UHA syntax
import Helium.Syntax.UHA_Syntax
import Helium.Syntax.UHA_Range   
import Helium.Syntax.UHA_Utils

import Helium.Utils.Utils (internalError, hole)
import Helium.ModuleSystem.ImportEnvironment  hiding (setTypeSynonyms)
import Helium.ModuleSystem.DictionaryEnvironment
import Helium.Main.Args

-- standard
import qualified Data.Map as M
import Data.Maybe 
import Data.List
import Control.Monad
import Control.Arrow

import qualified Unbound.Generics.LocallyNameless as UL
import Unbound.Generics.LocallyNameless.Fresh

import Helium.StaticAnalysis.StaticChecks.TypeFamilyInfos
import Helium.StaticAnalysis.Inferencers.OutsideInX.Rhodium.RhodiumTypes
import Helium.StaticAnalysis.Inferencers.OutsideInX.Rhodium.RhodiumSolver
import Helium.StaticAnalysis.Inferencers.OutsideInX.Rhodium.RhodiumGenerics
import Helium.StaticAnalysis.Inferencers.OutsideInX.Rhodium.RhodiumInstances(integer2Name)

import qualified Rhodium.Solver.SolveResult as SR

import Top.Types.Schemes
import Top.Types.Quantification hiding (bindTypeVariables)

import Debug.Trace

}
